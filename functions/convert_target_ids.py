# -*- coding: utf-8 -*-
"""
Created on Thu Jun  2 11:16:46 2022

@author: maobrien
"""

def convert_target_ids(df, ids_old, output_colname):
    '''
    This function transforms a dataframe column of MethaneSAT target ID values 
    based on the previous target deck (v04302021, April 2021) to their 
    corresponding ID in the new target deck (v20220423, April 2022).
    
    If there is an integer present in the "old ID" column that does not
    correspond to a true target ID (IDs range from 1-307), a "new ID" value 
    of -999 is returned to flag this error.

    Parameters
    ----------
    df: dataframe
        Dataframe containing a column of MethaneSAT IDs based on the 04/2021 
        target deck
    ids_old : string
        name of column containing the old MethaneSAT IDs
    output_colname : string
        Desired name of new column generated by this function,
        which will contain the mapped (new) MethaneSAT target IDs

    Returns
    -------
    dataframe (same as original, but with column of new IDs appended)

    '''
    old2new = {1: 276,
     2: 205,
     3: 182,
     4: 164,
     5: 133,
     6: 74,
     7: 93,
     8: 94,
     9: 23,
     10: 13,
     11: 14,
     12: 80,
     13: 50,
     14: 52,
     15: 81,
     16: 54,
     17: 24,
     18: 31,
     19: 40,
     20: 21,
     21: 7,
     22: 2,
     23: 213,
     24: 255,
     25: 256,
     26: 258,
     27: 243,
     28: 291,
     29: 282,
     30: 257,
     31: 220,
     32: 216,
     33: 232,
     34: 234,
     35: 238,
     36: 209,
     37: 210,
     38: 224,
     39: 228,
     40: 222,
     41: 179,
     42: 173,
     43: 193,
     44: 180,
     45: 174,
     46: 158,
     47: 136,
     48: 135,
     49: 143,
     50: 107,
     51: 144,
     52: 169,
     53: 55,
     54: 147,
     55: 30,
     56: 19,
     57: 16,
     58: 49,
     59: 3,
     60: 8,
     61: 155,
     62: 124,
     63: 134,
     64: 114,
     65: 132,
     66: 89,
     67: 129,
     68: 97,
     69: 11,
     70: 194,
     71: 235,
     72: 128,
     73: 192,
     74: 187,
     75: 219,
     76: 298,
     77: 212,
     78: 90,
     79: 15,
     80: 119,
     81: 300,
     82: 306,
     83: 82,
     84: 4,
     85: 211,
     86: 277,
     87: 175,
     88: 25,
     89: 9,
     90: 27,
     91: 56,
     92: 254,
     93: 148,
     94: 249,
     95: 154,
     96: 18,
     97: 103,
     98: 184,
     99: 92,
     100: 22,
     101: 181,
     102: 100,
     103: 48,
     104: 38,
     105: 186,
     106: 299,
     107: 302,
     108: 296,
     109: 166,
     110: 287,
     111: 165,
     112: 178,
     113: 1,
     114: 248,
     115: 140,
     116: 84,
     117: 113,
     118: 292,
     119: 137,
     120: 218,
     121: 188,
     122: 51,
     123: 229,
     124: 161,
     125: 157,
     126: 231,
     127: 242,
     128: 45,
     129: 215,
     130: 17,
     131: 259,
     132: 83,
     133: 185,
     134: 12,
     135: 236,
     136: 214,
     137: 305,
     138: 26,
     139: 35,
     140: 42,
     141: 53,
     142: 301,
     143: 245,
     144: 237,
     145: 241,
     146: 288,
     147: 293,
     148: 297,
     149: 260,
     150: 244,
     151: 233,
     152: 230,
     153: 217,
     154: 208,
     155: 207,
     156: 221,
     157: 167,
     158: 156,
     159: 123,
     160: 112,
     161: 116,
     162: 149,
     163: 150,
     164: 151,
     165: 159,
     166: 264,
     167: 142,
     168: 115,
     169: 57,
     170: 20,
     171: 85,
     172: 58,
     173: 62,
     174: 183,
     175: 307,
     176: 206,
     177: 223,
     178: 141,
     179: 41,
     180: 10,
     181: 34,
     182: 39,
     183: 153,
     184: 152,
     185: 91,
     186: 168,
     187: 160,
     188: 191,
     189: 170,
     190: 295,
     191: 294,
     192: 290,
     193: 289,
     194: 284,
     195: 283,
     196: 304,
     197: 303,
     198: 286,
     199: 285,
     200: 281,
     201: 280,
     202: 279,
     203: 278,
     204: 272,
     205: 271,
     206: 270,
     207: 269,
     208: 263,
     209: 262,
     210: 261,
     211: 275,
     212: 274,
     213: 273,
     214: 266,
     215: 265,
     216: 253,
     217: 252,
     218: 247,
     219: 246,
     220: 240,
     221: 239,
     222: 268,
     223: 267,
     224: 251,
     225: 250,
     226: 227,
     227: 226,
     228: 225,
     229: 202,
     230: 201,
     231: 190,
     232: 189,
     233: 139,
     234: 138,
     235: 200,
     236: 199,
     237: 204,
     238: 203,
     239: 198,
     240: 197,
     241: 196,
     242: 195,
     243: 172,
     244: 171,
     245: 163,
     246: 162,
     247: 146,
     248: 145,
     249: 127,
     250: 126,
     251: 125,
     252: 118,
     253: 117,
     254: 131,
     255: 130,
     256: 122,
     257: 121,
     258: 120,
     259: 111,
     260: 110,
     261: 109,
     262: 108,
     263: 102,
     264: 101,
     265: 106,
     266: 105,
     267: 104,
     268: 99,
     269: 98,
     270: 88,
     271: 87,
     272: 86,
     273: 79,
     274: 78,
     275: 77,
     276: 76,
     277: 75,
     278: 73,
     279: 72,
     280: 71,
     281: 70,
     282: 69,
     283: 68,
     284: 67,
     285: 66,
     286: 65,
     287: 64,
     288: 63,
     289: 61,
     290: 60,
     291: 59,
     292: 37,
     293: 36,
     294: 29,
     295: 28,
     296: 6,
     297: 5,
     298: 96,
     299: 95,
     300: 47,
     301: 46,
     302: 33,
     303: 32,
     304: 44,
     305: 43,
     306: 177,
     307: 176}
    
    df[output_colname] = df[ids_old].map(old2new).fillna(-999)
    return df

# Example usage
# outputdf = convert_target_ids(targets, 'id', 'id_new')